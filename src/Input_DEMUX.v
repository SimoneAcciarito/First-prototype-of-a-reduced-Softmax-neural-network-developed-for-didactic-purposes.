// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\r24b_pseudosoftmax_in10_8bit\Input_DEMUX.v
// Created: 2025-09-29 11:51:53
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Input_DEMUX
// Source Path: r24b_pseudosoftmax_in10_8bit/PseudoSM_ASIC/Input_DEMUX
// Hierarchy Level: 1
// Model version: 9.0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Input_DEMUX
          (clk,
           reset,
           Data,
           Sel,
           exp1,
           exp2,
           exp3,
           exp4,
           exp5,
           exp6,
           exp7,
           exp8,
           exp9,
           exp10);


  input   clk;
  input   reset;
  input   signed [7:0] Data;  // int8
  input   [3:0] Sel;  // ufix4
  output  signed [7:0] exp1;  // int8
  output  signed [7:0] exp2;  // int8
  output  signed [7:0] exp3;  // int8
  output  signed [7:0] exp4;  // int8
  output  signed [7:0] exp5;  // int8
  output  signed [7:0] exp6;  // int8
  output  signed [7:0] exp7;  // int8
  output  signed [7:0] exp8;  // int8
  output  signed [7:0] exp9;  // int8
  output  signed [7:0] exp10;  // int8


  wire Compare_To_Constant_out1;
  reg signed [7:0] Delay6_bypass_delay;  // sfix8
  reg signed [7:0] Delay6_reg;  // sfix8
  wire signed [7:0] Delay6_out1;  // int8
  wire Compare_To_Constant1_out1;
  reg signed [7:0] Delay7_bypass_delay;  // sfix8
  reg signed [7:0] Delay7_reg;  // sfix8
  wire signed [7:0] Delay7_out1;  // int8
  wire Compare_To_Constant2_out1;
  reg signed [7:0] Delay8_bypass_delay;  // sfix8
  reg signed [7:0] Delay8_reg;  // sfix8
  wire signed [7:0] Delay8_out1;  // int8
  wire Compare_To_Constant3_out1;
  reg signed [7:0] Delay9_bypass_delay;  // sfix8
  reg signed [7:0] Delay9_reg;  // sfix8
  wire signed [7:0] Delay9_out1;  // int8
  wire Compare_To_Constant4_out1;
  reg signed [7:0] Delay10_bypass_delay;  // sfix8
  reg signed [7:0] Delay10_reg;  // sfix8
  wire signed [7:0] Delay10_out1;  // int8
  wire Compare_To_Constant5_out1;
  reg signed [7:0] Delay11_bypass_delay;  // sfix8
  reg signed [7:0] Delay11_reg;  // sfix8
  wire signed [7:0] Delay11_out1;  // int8
  wire Compare_To_Constant6_out1;
  reg signed [7:0] Delay12_bypass_delay;  // sfix8
  reg signed [7:0] Delay12_reg;  // sfix8
  wire signed [7:0] Delay12_out1;  // int8
  wire Compare_To_Constant7_out1;
  reg signed [7:0] Delay13_bypass_delay;  // sfix8
  reg signed [7:0] Delay13_reg;  // sfix8
  wire signed [7:0] Delay13_out1;  // int8
  wire Compare_To_Constant8_out1;
  reg signed [7:0] Delay14_bypass_delay;  // sfix8
  reg signed [7:0] Delay14_reg;  // sfix8
  wire signed [7:0] Delay14_out1;  // int8
  wire Compare_To_Constant9_out1;
  reg signed [7:0] Delay15_bypass_delay;  // sfix8
  reg signed [7:0] Delay15_reg;  // sfix8
  wire signed [7:0] Delay15_out1;  // int8


  assign Compare_To_Constant_out1 = Sel == 4'b0000;

  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_bypass_delay <= 8'sb00000000;
        Delay6_reg <= 8'sb00000000;
      end
      else begin
        if (Compare_To_Constant_out1) begin
          Delay6_bypass_delay <= Delay6_reg;
          Delay6_reg <= Data;
        end
      end
    end

  assign Delay6_out1 = (Compare_To_Constant_out1 == 1'b1 ? Delay6_reg :
              Delay6_bypass_delay);

  assign exp1 = Delay6_out1;

  assign Compare_To_Constant1_out1 = Sel == 4'b0001;

  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_bypass_delay <= 8'sb00000000;
        Delay7_reg <= 8'sb00000000;
      end
      else begin
        if (Compare_To_Constant1_out1) begin
          Delay7_bypass_delay <= Delay7_reg;
          Delay7_reg <= Data;
        end
      end
    end

  assign Delay7_out1 = (Compare_To_Constant1_out1 == 1'b1 ? Delay7_reg :
              Delay7_bypass_delay);

  assign exp2 = Delay7_out1;

  assign Compare_To_Constant2_out1 = Sel == 4'b0010;

  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_bypass_delay <= 8'sb00000000;
        Delay8_reg <= 8'sb00000000;
      end
      else begin
        if (Compare_To_Constant2_out1) begin
          Delay8_bypass_delay <= Delay8_reg;
          Delay8_reg <= Data;
        end
      end
    end

  assign Delay8_out1 = (Compare_To_Constant2_out1 == 1'b1 ? Delay8_reg :
              Delay8_bypass_delay);

  assign exp3 = Delay8_out1;

  assign Compare_To_Constant3_out1 = Sel == 4'b0011;

  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_bypass_delay <= 8'sb00000000;
        Delay9_reg <= 8'sb00000000;
      end
      else begin
        if (Compare_To_Constant3_out1) begin
          Delay9_bypass_delay <= Delay9_reg;
          Delay9_reg <= Data;
        end
      end
    end

  assign Delay9_out1 = (Compare_To_Constant3_out1 == 1'b1 ? Delay9_reg :
              Delay9_bypass_delay);

  assign exp4 = Delay9_out1;

  assign Compare_To_Constant4_out1 = Sel == 4'b0100;

  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_bypass_delay <= 8'sb00000000;
        Delay10_reg <= 8'sb00000000;
      end
      else begin
        if (Compare_To_Constant4_out1) begin
          Delay10_bypass_delay <= Delay10_reg;
          Delay10_reg <= Data;
        end
      end
    end

  assign Delay10_out1 = (Compare_To_Constant4_out1 == 1'b1 ? Delay10_reg :
              Delay10_bypass_delay);

  assign exp5 = Delay10_out1;

  assign Compare_To_Constant5_out1 = Sel == 4'b0101;

  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_bypass_delay <= 8'sb00000000;
        Delay11_reg <= 8'sb00000000;
      end
      else begin
        if (Compare_To_Constant5_out1) begin
          Delay11_bypass_delay <= Delay11_reg;
          Delay11_reg <= Data;
        end
      end
    end

  assign Delay11_out1 = (Compare_To_Constant5_out1 == 1'b1 ? Delay11_reg :
              Delay11_bypass_delay);

  assign exp6 = Delay11_out1;

  assign Compare_To_Constant6_out1 = Sel == 4'b0110;

  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_bypass_delay <= 8'sb00000000;
        Delay12_reg <= 8'sb00000000;
      end
      else begin
        if (Compare_To_Constant6_out1) begin
          Delay12_bypass_delay <= Delay12_reg;
          Delay12_reg <= Data;
        end
      end
    end

  assign Delay12_out1 = (Compare_To_Constant6_out1 == 1'b1 ? Delay12_reg :
              Delay12_bypass_delay);

  assign exp7 = Delay12_out1;

  assign Compare_To_Constant7_out1 = Sel == 4'b0111;

  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_bypass_delay <= 8'sb00000000;
        Delay13_reg <= 8'sb00000000;
      end
      else begin
        if (Compare_To_Constant7_out1) begin
          Delay13_bypass_delay <= Delay13_reg;
          Delay13_reg <= Data;
        end
      end
    end

  assign Delay13_out1 = (Compare_To_Constant7_out1 == 1'b1 ? Delay13_reg :
              Delay13_bypass_delay);

  assign exp8 = Delay13_out1;

  assign Compare_To_Constant8_out1 = Sel == 4'b1000;

  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_bypass_delay <= 8'sb00000000;
        Delay14_reg <= 8'sb00000000;
      end
      else begin
        if (Compare_To_Constant8_out1) begin
          Delay14_bypass_delay <= Delay14_reg;
          Delay14_reg <= Data;
        end
      end
    end

  assign Delay14_out1 = (Compare_To_Constant8_out1 == 1'b1 ? Delay14_reg :
              Delay14_bypass_delay);

  assign exp9 = Delay14_out1;

  assign Compare_To_Constant9_out1 = Sel == 4'b1001;

  always @(posedge clk or posedge reset)
    begin : Delay15_process
      if (reset == 1'b1) begin
        Delay15_bypass_delay <= 8'sb00000000;
        Delay15_reg <= 8'sb00000000;
      end
      else begin
        if (Compare_To_Constant9_out1) begin
          Delay15_bypass_delay <= Delay15_reg;
          Delay15_reg <= Data;
        end
      end
    end

  assign Delay15_out1 = (Compare_To_Constant9_out1 == 1'b1 ? Delay15_reg :
              Delay15_bypass_delay);

  assign exp10 = Delay15_out1;

endmodule  // Input_DEMUX

